import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import altair as alt
from datetime import datetime, timedelta
import time
import json
from data.users import load_user_data, save_user_data
from data.lessons import load_lessons
from data.test_questions import DEGEN_TYPES
from config.settings import XP_LEVELS
from utils.material3_components import apply_material3_theme
from utils.components import zen_header, zen_button, notification, data_chart, stat_card
from utils.layout import get_device_type, responsive_grid

def check_admin_auth():
    """Sprawdza uwierzytelnienie administratora"""

    # Oryginalna kontrola uprawnie≈Ñ (zakomentowana na czas test√≥w)
    if not st.session_state.get('logged_in', False):
        st.error("Musisz byƒá zalogowany, aby uzyskaƒá dostƒôp do panelu administratora.")
        return False
       
    admin_users = ["admin", "zenmaster", "Anna"]  # Dodaj sw√≥j login
    if st.session_state.get('username') not in admin_users:
        st.error("Nie masz uprawnie≈Ñ do przeglƒÖdania panelu administratora.")
        return False
       
    return True

def get_user_activity_data():
    """Pobiera i przetwarza dane o aktywno≈õci u≈ºytkownik√≥w"""
    users_data = load_user_data()
    
    # Przygotuj dane do analizy
    activity_data = []
    for username, data in users_data.items():
        activity_data.append({
            'username': username,
            'xp': data.get('xp', 0),
            'level': data.get('level', 1),
            'completed_lessons': len(data.get('completed_lessons', [])),
            'degen_type': data.get('degen_type', 'Nieznany'),
            'registration_date': data.get('registration_date', '2023-01-01'),
            'last_login': data.get('last_login', '2023-01-01'),
            'test_taken': data.get('test_taken', False),
            'completed_missions': len(data.get('completed_missions', [])),
            'streak': data.get('streak', 0)
        })
    
    return pd.DataFrame(activity_data)

def get_lessons_stats():
    """Pobiera i analizuje statystyki lekcji"""
    users_data = load_user_data()
    lessons = load_lessons()
    
    # Inicjalizuj liczniki uko≈Ñcze≈Ñ dla ka≈ºdej lekcji
    completion_count = {lesson_id: 0 for lesson_id in lessons.keys()}
    
    # Zlicz uko≈Ñczenia lekcji
    for username, data in users_data.items():
        completed_lessons = data.get('completed_lessons', [])
        for lesson_id in completed_lessons:
            if lesson_id in completion_count:
                completion_count[lesson_id] += 1
    
    # Utw√≥rz DataFrame ze statystykami lekcji
    lessons_stats = []
    for lesson_id, lesson in lessons.items():
        lessons_stats.append({
            'lesson_id': lesson_id,
            'title': lesson.get('title', 'Brak tytu≈Çu'),
            'category': lesson.get('tag', 'Brak kategorii'),
            'difficulty': lesson.get('difficulty', 'intermediate'),
            'completions': completion_count.get(lesson_id, 0),
            'completion_rate': round(completion_count.get(lesson_id, 0) / len(users_data) * 100, 2) if users_data else 0
        })
    
    return pd.DataFrame(lessons_stats)

def get_degen_type_distribution():
    """Analizuje rozk≈Çad typ√≥w degen√≥w w≈õr√≥d u≈ºytkownik√≥w"""
    users_data = load_user_data()
    
    # Zlicz wystƒÖpienia ka≈ºdego typu degena
    degen_counts = {}
    for _, data in users_data.items():
        degen_type = data.get('degen_type', 'Nieznany')
        degen_counts[degen_type] = degen_counts.get(degen_type, 0) + 1
    
    # Utw√≥rz DataFrame dla wizualizacji
    degen_distribution = []
    for degen_type, count in degen_counts.items():
        degen_distribution.append({
            'degen_type': degen_type,
            'count': count,
            'percentage': round(count / len(users_data) * 100, 2) if users_data else 0
        })
    
    return pd.DataFrame(degen_distribution)

def plot_user_activity_over_time():
    """Generuje wykres aktywno≈õci u≈ºytkownik√≥w w czasie"""
    users_data = load_user_data()
    
    # W rzeczywistej aplikacji te dane by≈Çyby pobierane z historii logowa≈Ñ
    # Dla demonstracji generujemy przyk≈Çadowe dane
    
    # Symulacja dziennej aktywno≈õci
    today = datetime.now()
    dates = [(today - timedelta(days=i)).strftime('%Y-%m-%d') for i in range(30)]
    
    # Symulacja liczby aktywnych u≈ºytkownik√≥w dziennie (losowo)
    np.random.seed(42)  # Dla powtarzalno≈õci
    total_users = len(users_data)
    active_users = [int(np.random.binomial(total_users, 0.3 + 0.1 * np.sin(i/5))) for i in range(30)]
    
    # Odwr√≥ƒá listy, aby najnowsze dane by≈Çy na ko≈Ñcu
    dates.reverse()
    active_users.reverse()
    
    # Utw√≥rz DataFrame
    activity_df = pd.DataFrame({
        'data': dates,
        'aktywni_u≈ºytkownicy': active_users
    })
    
    return activity_df

def show_admin_dashboard():
    """Wy≈õwietla panel administratora"""
    # Zastosuj style Material 3 - tymczasowo wykomentowane
    # apply_material3_theme()
    
    # Dodaj informacjƒô diagnostycznƒÖ
    st.write("DEBUG - show_admin_dashboard() started")
    
    # Sprawd≈∫ uwierzytelnienie admina
    if not check_admin_auth():
        # Je≈õli u≈ºytkownik nie jest administratorem, wy≈õwietl przycisk powrotu
        if zen_button("Powr√≥t do strony g≈Ç√≥wnej"):
            st.session_state.page = 'dashboard'
            st.rerun()
        return
    
    # Nag≈Ç√≥wek panelu administratora
    zen_header("üõ°Ô∏è Panel Administratora")
    
    # Pobierz urzƒÖdzenie
    device_type = get_device_type()
    
    # Dodaj informacjƒô o ostatnim od≈õwie≈ºeniu
    st.markdown(f"**Ostatnie od≈õwie≈ºenie:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Przycisk do od≈õwie≈ºania danych
    if zen_button("üîÑ Od≈õwie≈º dane"):
        st.rerun()
    
    # Zak≈Çadki g≈Ç√≥wne panelu administratora
    admin_tabs = st.tabs(["PrzeglƒÖd", "U≈ºytkownicy", "Lekcje", "Testy", "ZarzƒÖdzanie"])
    
    # 1. Zak≈Çadka PrzeglƒÖd
    with admin_tabs[0]:
        st.subheader("PrzeglƒÖd statystyk platformy")
        
        # Pobierz dane
        users_data = load_user_data()
        user_df = get_user_activity_data()
        
        # Podstawowe statystyki
        total_users = len(users_data)
        total_lessons_completed = user_df['completed_lessons'].sum()
        avg_xp = int(user_df['xp'].mean()) if not user_df.empty else 0
        tests_taken = user_df['test_taken'].sum()
        
        # Wy≈õwietl statystyki w responsywnym uk≈Çadzie
        stats_cols = responsive_grid(4, 2, 1)
        
        with stats_cols[0]:
            stat_card("Liczba u≈ºytkownik√≥w", total_users, "üë•")
        
        with stats_cols[1]:
            stat_card("Uko≈Ñczone lekcje", int(total_lessons_completed), "üìö")
        
        with stats_cols[2]:
            stat_card("≈örednie XP", avg_xp, "‚≠ê")
        
        with stats_cols[3]:
            stat_card("Wykonane testy", int(tests_taken), "üìä")
        
        # Wykresy aktywno≈õci
        st.subheader("Aktywno≈õƒá u≈ºytkownik√≥w")
        
        activity_df = plot_user_activity_over_time()
        
        # Wykres aktywno≈õci u≈ºytkownik√≥w
        chart = alt.Chart(activity_df).mark_line(point=True).encode(
            x=alt.X('data:T', title='Data'),
            y=alt.Y('aktywni_u≈ºytkownicy:Q', title='Liczba aktywnych u≈ºytkownik√≥w'),
            tooltip=['data', 'aktywni_u≈ºytkownicy']
        ).properties(
            width='container',
            height=350,
            title='Dzienna aktywno≈õƒá u≈ºytkownik√≥w (ostatnie 30 dni)'
        )
        
        st.altair_chart(chart, use_container_width=True)
        
        # Rozk≈Çad typ√≥w degen√≥w
        st.subheader("Rozk≈Çad typ√≥w degen√≥w")
        
        degen_df = get_degen_type_distribution()
        
        if not degen_df.empty:
            # Wykres ko≈Çowy typ√≥w degen√≥w
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.pie(degen_df['count'], labels=degen_df['degen_type'], autopct='%1.1f%%', 
                   startangle=90, shadow=False)
            ax.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle
            st.pyplot(fig)
        else:
            st.info("Brak danych o typach degen√≥w.")
    
    # 2. Zak≈Çadka U≈ºytkownicy
    with admin_tabs[1]:
        st.subheader("Szczeg√≥≈Çy u≈ºytkownik√≥w")
        
        # Pobierz dane
        user_df = get_user_activity_data()
        
        # Filtrowanie u≈ºytkownik√≥w
        filter_cols = st.columns(3)
        with filter_cols[0]:
            min_xp = st.number_input("Min XP", min_value=0, value=0)
        with filter_cols[1]:
            degen_filter = st.selectbox("Filtruj wg typu degena", 
                                       options=["Wszystkie"] + list(user_df['degen_type'].unique()))
        with filter_cols[2]:
            sort_by = st.selectbox("Sortuj wg", 
                                   options=["xp", "level", "completed_lessons", "username"])
        
        # Zastosuj filtry
        filtered_df = user_df
        if min_xp > 0:
            filtered_df = filtered_df[filtered_df['xp'] >= min_xp]
        
        if degen_filter != "Wszystkie":
            filtered_df = filtered_df[filtered_df['degen_type'] == degen_filter]
        
        # Sortuj dane
        filtered_df = filtered_df.sort_values(by=sort_by, ascending=False)
        
        # Wy≈õwietl tabelƒô u≈ºytkownik√≥w
        st.dataframe(
            filtered_df,
            column_config={
                "username": "Nazwa u≈ºytkownika",
                "xp": "XP",
                "level": "Poziom",
                "completed_lessons": "Uko≈Ñczone lekcje",
                "degen_type": "Typ degena",
                "test_taken": "Test wykonany",
                "streak": "Seria dni"
            },
            use_container_width=True
        )
        
        # Dodaj opcjƒô eksportu danych
        if zen_button("Eksportuj dane u≈ºytkownik√≥w do CSV"):
            csv = filtered_df.to_csv(index=False)
            st.download_button(
                label="Pobierz CSV",
                data=csv,
                file_name="users_data.csv",
                mime="text/csv"
            )
    
    # 3. Zak≈Çadka Lekcje
    with admin_tabs[2]:
        st.subheader("Statystyki lekcji")
        
        # Pobierz dane lekcji
        lessons_df = get_lessons_stats()
        
        # Wy≈õwietl tabelƒô statystyk lekcji
        st.dataframe(
            lessons_df,
            column_config={
                "lesson_id": "ID lekcji",
                "title": "Tytu≈Ç",
                "category": "Kategoria",
                "difficulty": st.column_config.SelectboxColumn(
                    "Poziom trudno≈õci", 
                    options=["beginner", "intermediate", "advanced"],
                    required=True
                ),
                "completions": "Liczba uko≈Ñcze≈Ñ",
                "completion_rate": st.column_config.ProgressColumn(
                    "Wska≈∫nik uko≈Ñczenia (%)",
                    min_value=0,
                    max_value=100,
                    format="%{value:.2f}"
                )
            },
            use_container_width=True
        )
        
        # Wykres popularno≈õci lekcji (top 10)
        st.subheader("Najpopularniejsze lekcje")
        
        top_lessons = lessons_df.sort_values('completions', ascending=False).head(10)
        
        if not top_lessons.empty:
            chart = alt.Chart(top_lessons).mark_bar().encode(
                x=alt.X('completions:Q', title='Liczba uko≈Ñcze≈Ñ'),
                y=alt.Y('title:N', title='Lekcja', sort='-x'),
                color=alt.Color('category:N', title='Kategoria'),
                tooltip=['title', 'category', 'completions', 'completion_rate']
            ).properties(
                width='container',
                height=400,
                title='Top 10 najpopularniejszych lekcji'
            )
            
            st.altair_chart(chart, use_container_width=True)
        else:
            st.info("Brak danych o uko≈Ñczonych lekcjach.")
    
    # 4. Zak≈Çadka Testy
    with admin_tabs[3]:
        st.subheader("Wyniki test√≥w Degena")
        
        # Pobierz dane o u≈ºytkownikach
        users_data = load_user_data()
        
        # Zbierz dane o wynikach test√≥w
        test_results = []
        for username, data in users_data.items():
            if data.get('test_scores'):
                for degen_type, score in data.get('test_scores', {}).items():
                    test_results.append({
                        'username': username,
                        'degen_type': degen_type,
                        'score': score
                    })
        
        test_df = pd.DataFrame(test_results)
        
        if not test_df.empty:
            # ≈örednie wyniki dla ka≈ºdego typu degena
            st.subheader("≈örednie wyniki dla typ√≥w degen√≥w")
            
            avg_scores = test_df.groupby('degen_type')['score'].mean().reset_index()
            avg_scores['score'] = avg_scores['score'].round(2)
            
            chart = alt.Chart(avg_scores).mark_bar().encode(
                x=alt.X('degen_type:N', title='Typ degena'),
                y=alt.Y('score:Q', title='≈öredni wynik'),
                color=alt.Color('degen_type:N', title='Typ degena'),
                tooltip=['degen_type', 'score']
            ).properties(
                width='container',
                height=350,
                title='≈örednie wyniki test√≥w wg typu degena'
            )
            
            st.altair_chart(chart, use_container_width=True)
            
            # Tabela z wynikami test√≥w
            st.subheader("Szczeg√≥≈Çowe wyniki test√≥w")
            st.dataframe(
                test_df,
                column_config={
                    "username": "Nazwa u≈ºytkownika",
                    "degen_type": "Typ degena",
                    "score": "Wynik"
                },
                use_container_width=True
            )
        else:
            st.info("Brak danych o wynikach test√≥w.")
    
    # 5. Zak≈Çadka ZarzƒÖdzanie
    with admin_tabs[4]:
        st.subheader("ZarzƒÖdzanie u≈ºytkownikami")
        
        # Pobierz dane
        users_data = load_user_data()
        usernames = list(users_data.keys())
        
        # Wyb√≥r u≈ºytkownika
        selected_user = st.selectbox("Wybierz u≈ºytkownika", options=usernames)
        
        if selected_user:
            user_data = users_data.get(selected_user, {})
            
            # Wy≈õwietl szczeg√≥≈Çy u≈ºytkownika
            st.json(user_data)
            
            # Akcje zarzƒÖdzania
            action_cols = st.columns(3)
            
            with action_cols[0]:
                if zen_button("üîÑ Reset postƒôpu XP", key="reset_xp"):
                    if st.session_state.get('confirm_reset_xp', False):
                        # Wykonaj reset XP
                        users_data[selected_user]['xp'] = 0
                        users_data[selected_user]['level'] = 1
                        save_user_data(users_data)
                        st.session_state.confirm_reset_xp = False
                        notification("Zresetowano XP u≈ºytkownika.", type="success")
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.session_state.confirm_reset_xp = True
                        st.warning("Czy na pewno chcesz zresetowaƒá XP? Kliknij ponownie, aby potwierdziƒá.")
            
            with action_cols[1]:
                if zen_button("üìö Reset uko≈Ñczonych lekcji", key="reset_lessons"):
                    if st.session_state.get('confirm_reset_lessons', False):
                        # Wykonaj reset uko≈Ñczonych lekcji
                        users_data[selected_user]['completed_lessons'] = []
                        save_user_data(users_data)
                        st.session_state.confirm_reset_lessons = False
                        notification("Zresetowano uko≈Ñczone lekcje u≈ºytkownika.", type="success")
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.session_state.confirm_reset_lessons = True
                        st.warning("Czy na pewno chcesz zresetowaƒá uko≈Ñczone lekcje? Kliknij ponownie, aby potwierdziƒá.")
            
            with action_cols[2]:
                if zen_button("üóëÔ∏è Usu≈Ñ u≈ºytkownika", key="delete_user"):
                    if st.session_state.get('confirm_delete', False):
                        # Wykonaj usuniƒôcie u≈ºytkownika
                        users_data.pop(selected_user, None)
                        save_user_data(users_data)
                        st.session_state.confirm_delete = False
                        notification("Usuniƒôto u≈ºytkownika.", type="success")
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.session_state.confirm_delete = True
                        st.warning("Czy na pewno chcesz usunƒÖƒá tego u≈ºytkownika? Ta operacja jest nieodwracalna! Kliknij ponownie, aby potwierdziƒá.")
            
            # Dodatkowe ustawienia u≈ºytkownika
            st.subheader("Edycja danych u≈ºytkownika")
            
            edit_cols = st.columns(2)
            with edit_cols[0]:
                new_xp = st.number_input("Punkty XP", min_value=0, value=user_data.get('xp', 0))
            
            with edit_cols[1]:
                new_level = st.number_input("Poziom", min_value=1, value=user_data.get('level', 1))
            
            # Admin status
            is_admin = st.checkbox("Administrator", value=selected_user in ["admin", "zenmaster"])
            
            # Zapisz zmiany
            if zen_button("Zapisz zmiany"):
                users_data[selected_user]['xp'] = new_xp
                users_data[selected_user]['level'] = new_level
                
                # Zapisz dane
                save_user_data(users_data)
                notification("Zapisano zmiany.", type="success")
                time.sleep(1)
                st.rerun()
        
        # Przycisk eksportu kopii zapasowej
        st.subheader("Kopia zapasowa")
        if zen_button("üíæ Eksportuj kopiƒô zapasowƒÖ danych"):
            # Konwertuj dane do formatu JSON
            users_json = json.dumps(users_data, indent=4)
            
            # Oferuj plik do pobrania
            st.download_button(
                label="Pobierz kopiƒô zapasowƒÖ (JSON)",
                data=users_json,
                file_name=f"zen_degen_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )