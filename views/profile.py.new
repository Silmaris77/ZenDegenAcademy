import streamlit as st
from datetime import datetime, timedelta
import numpy as np
import matplotlib.pyplot as plt
import time
from utils.personalization import (
    update_user_avatar,
    update_user_theme,
    get_user_style,
    generate_user_css
)
from utils.goals import (
    add_user_goal,
    update_goal_progress,
    delete_goal,
    get_user_goals,
    calculate_goal_metrics
)
from config.settings import USER_AVATARS, THEMES, DEGEN_TYPES, BADGES
from data.users import load_user_data
from data.degen_details import degen_details
from views.degen_test import plot_radar_chart
from views.dashboard import calculate_xp_progress
from utils.components import zen_header, zen_button, notification, content_section, stat_card, xp_level_display, goal_card, badge_card, progress_bar, tip_block, quote_block, add_animations_css
from utils.user_components import user_stats_panel

def show_profile():
    zen_header("Profil u≈ºytkownika")
    
    # Wczytaj dane u≈ºytkownika
    users_data = load_user_data()
    user_data = users_data.get(st.session_state.username, {})
    style = get_user_style(st.session_state.username)
    
    # Wy≈õwietl personalizowane style
    st.markdown(generate_user_css(st.session_state.username), unsafe_allow_html=True)
    
    # Add animations and effects using the component
    add_animations_css()
    
    # User Statistics Section
    st.markdown("<div class='st-bx fadeIn'>", unsafe_allow_html=True)
    
    # Setup data for user stats panel
    avatar = style['avatar']
    degen_type = user_data.get('degen_type', 'Typ nie okre≈õlony')
    level = user_data.get('level', 1)
    xp = user_data.get('xp', 0)
    completed = len(user_data.get('completed_lessons', []))
    
    # Calculate XP data
    xp_progress, xp_needed = calculate_xp_progress(user_data)
    next_level_xp = xp + xp_needed  # Estimated XP for next level
    
    # Display user stats using the component
    user_stats_panel(
        username=st.session_state.username,
        avatar=avatar,
        degen_type=degen_type,
        level=level,
        xp=xp,
        completed_lessons=completed,
        next_level_xp=next_level_xp
    )
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    # Main Profile Tabs
    tab1, tab3, tab4 = st.tabs(["Personalizacja", "Odznaki", "Typ Degena"])
    
    # Tab 1: Personalization
    with tab1:
        st.markdown("<div class='profile-tab-content'>", unsafe_allow_html=True)
        personalization_cols = st.columns(2)
        
        # Avatar Selection
        with personalization_cols[0]:
            st.markdown("<div class='st-bx'>", unsafe_allow_html=True)
            st.subheader("Wybierz avatar")
            
            # Visual avatar selector with all options displayed
            current_avatar = user_data.get('avatar', 'default')
            
            # Create a visual avatar grid using Streamlit components instead of raw HTML/JS
            # This approach avoids raw HTML/JS being shown to users
            avatar_grid = st.container()
            with avatar_grid:
                # Show header text
                st.write("Kliknij, aby wybraƒá:")
                
                # Create rows of avatars with 4 avatars per row
                items_per_row = 4
                avatar_rows = [list(USER_AVATARS.items())[i:i+items_per_row] for i in range(0, len(USER_AVATARS), items_per_row)]
                
                for row in avatar_rows:
                    cols = st.columns(items_per_row)
                    for i, (avatar_id, avatar_emoji) in enumerate(row):
                        with cols[i]:
                            # Style based on whether this avatar is selected
                            highlight = f"color: {style['theme']['primary']}; transform: scale(1.2);" if avatar_id == current_avatar else ""
                            
                            # Add visible indicator for selected avatar
                            selected_indicator = "‚úì " if avatar_id == current_avatar else ""
                            
                            st.markdown(f"""
                            <div style="text-align: center; cursor: pointer; {highlight}">
                                <div style="font-size: 2.5rem; margin-bottom: 5px;">{avatar_emoji}</div>
                                <div style="font-size: 0.8rem;">{selected_indicator}{avatar_id.title()}</div>
                            </div>
                            """, unsafe_allow_html=True)
            
            # We still need a form to submit the selection
            # Streamlit's JavaScript interaction is limited, so we use a dropdown for actual selection
            selected_avatar = st.selectbox(
                "Wybierz swojego avatara:",
                options=list(USER_AVATARS.keys()),
                format_func=lambda x: f"{USER_AVATARS[x]} - {x.title()}",
                index=list(USER_AVATARS.keys()).index(current_avatar),
                label_visibility="collapsed"
            )
            
            if zen_button("Zapisz avatar", key="save_avatar"):
                if update_user_avatar(st.session_state.username, selected_avatar):
                    notification("Avatar zosta≈Ç zaktualizowany!", type="success")
                    st.rerun()
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        # Theme Selection
        with personalization_cols[1]:
            st.markdown("<div class='st-bx'>", unsafe_allow_html=True)
            st.subheader("Wybierz motyw")
            
            current_theme = user_data.get('theme', 'default')
            
            # Visual theme selector
            for theme_id, theme_colors in THEMES.items():
                selected_class = "selected" if theme_id == current_theme else ""
                
                st.markdown(f"""
                <div class="theme-option {selected_class}" id="theme-{theme_id}">
                    <div><strong>{theme_id.replace('_', ' ').title()}</strong></div>
                    <div class="theme-colors">
                        <div class="theme-color-sample" style="background-color: {theme_colors['primary']};"></div>
                        <div class="theme-color-sample" style="background-color: {theme_colors['secondary']};"></div>
                        <div class="theme-color-sample" style="background-color: {theme_colors['accent']};"></div>
                    </div>
                </div>
                """, unsafe_allow_html=True)
            
            # We still need a dropdown for selection
            selected_theme = st.selectbox(
                "Wybierz motyw:",
                options=list(THEMES.keys()),
                format_func=lambda x: x.replace('_', ' ').title(),
                index=list(THEMES.keys()).index(current_theme),
                label_visibility="collapsed"
            )
            
            if zen_button("Zapisz motyw", key="save_theme"):
                if update_user_theme(st.session_state.username, selected_theme):
                    notification("Motyw zosta≈Ç zaktualizowany!", type="success")
                    st.rerun()
            
            st.markdown("</div>", unsafe_allow_html=True)
        
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Tab 3: Badges
    with tab3:
        st.markdown("<div class='profile-tab-content'>", unsafe_allow_html=True)
        st.markdown("<div class='st-bx'>", unsafe_allow_html=True)
        
        badges = user_data.get('badges', [])
        
        if badges:
            st.subheader("Twoje odznaki")
            
            # Create grid for badges
            badge_cols = st.columns(4)
            
            for i, badge_id in enumerate(badges):
                if badge_id in BADGES:
                    badge = BADGES[badge_id]
                    with badge_cols[i % 4]:
                        badge_card(
                            icon=badge['icon'],
                            title=badge['name'],
                            description=badge['description'],
                            earned=True
                        )
        else:
            # Display available badges in muted colors
            st.subheader("Dostƒôpne odznaki")
            st.info("Nie masz jeszcze ≈ºadnych odznak. Uko≈Ñcz lekcje i wykonuj misje aby je zdobyƒá!")
            
            # Create grid for available badges
            badge_cols = st.columns(4)
            
            for i, (badge_id, badge) in enumerate(BADGES.items()):
                with badge_cols[i % 4]:
                    badge_card(
                        icon=badge['icon'],
                        title=badge['name'],
                        description=badge['description'],
                        earned=False
                    )
        
        st.markdown("</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)
    
    # Tab 4: Degen Type
    with tab4:
        st.markdown("<div class='profile-tab-content'>", unsafe_allow_html=True)
        st.markdown("<div class='st-bx'>", unsafe_allow_html=True)
        
        if user_data.get('degen_type'):
            degen_type = user_data['degen_type']
            
            # Header with degen type
            st.markdown(f"<h2 style='text-align: center;'>{degen_type}</h2>", unsafe_allow_html=True)
            tagline = DEGEN_TYPES.get(degen_type, {}).get("tagline", "Tw√≥j unikalny styl inwestowania")
            st.markdown(f"<div style='text-align: center; color: #666; margin-bottom: 20px;'>{tagline}</div>", unsafe_allow_html=True)
            
            if degen_type in DEGEN_TYPES:
                # Description
                content_section(
                    "Opis",
                    DEGEN_TYPES[degen_type]["description"],
                    icon="üìñ",
                    border_color="#3498db",
                    collapsed=False
                )
                
                # Radar chart if available
                if 'test_scores' in user_data:
                    st.subheader("Tw√≥j profil inwestycyjny")
                    radar_fig = plot_radar_chart(user_data['test_scores'])
                    st.pyplot(radar_fig)
                
                # Strengths and challenges in two columns
                col1, col2 = st.columns(2)
                
                with col1:
                    content_section(
                        "Mocne strony", 
                        "\n".join([f"- ‚úÖ {strength}" for strength in DEGEN_TYPES[degen_type]["strengths"]]),
                        icon="üí™",
                        border_color="#27ae60",
                        collapsed=False
                    )
                
                with col2:
                    content_section(
                        "Wyzwania", 
                        "\n".join([f"- ‚ö†Ô∏è {challenge}" for challenge in DEGEN_TYPES[degen_type]["challenges"]]),
                        icon="üîç",
                        border_color="#e74c3c",
                        collapsed=False
                    )
                
                # Strategy
                tip_block(
                    DEGEN_TYPES[degen_type]["strategy"],
                    title="Rekomendowana strategia",
                    icon="üéØ"
                )
                
                # Detailed description
                if degen_type in degen_details:
                    content_section(
                        "Szczeg√≥≈Çowy opis twojego typu degena", 
                        degen_details[degen_type],
                        icon="üìö",
                        collapsed=True
                    )
            else:
                st.warning("Szczeg√≥≈Çowy opis dla tego typu degena nie jest jeszcze dostƒôpny.")
        else:
            notification(
                "Nie okre≈õlono jeszcze twojego typu degena. Wykonaj test degena, aby odkryƒá sw√≥j unikalny styl inwestowania i dostosowane rekomendacje.",
                type="info"
            )
            
            if zen_button("Wykonaj test Degena", key="take_test"):
                st.session_state.page = 'degen_test'
                st.rerun()
        
        st.markdown("</div>", unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)
